/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
typedef pair<int ,int > Pair;
class Solution {
public:
    
    Pair maxPathSumHelper(TreeNode* root, int &maxAns){
        if(!root){
            return make_pair(INT_MIN,0);
        }
    
        Pair left = maxPathSumHelper(root->left,maxAns);
        Pair right = maxPathSumHelper(root->right,maxAns);
        Pair p;
        p.first = max(left.first, max(right.first, max(0, left.second) + max(0,right.second) + root->val));
        maxAns = max(maxAns, p.first);
        p.second = max(max(left.second,0), max(0,right.second)) + root->val;
        return p;
    }

    
    int maxPathSum(TreeNode* root) {
        int maxAns = INT_MIN;
        int ans = maxPathSumHelper(root, maxAns).first;
        maxAns = max(maxAns, ans);
        return maxAns == INT_MIN ? 0 : maxAns;
    }
};
