class Solution {
public:
    
    int getPivot(vector<int> &nums, int s, int e){
        if(s > e){
            return -1;
        }
        int mid = s + (e - s)/2;
        if(nums[mid] > nums[mid + 1]){
            return mid + 1;
        }
        if(nums[mid]< nums[mid - 1]){
            return mid;
        }
        if(nums[mid] > nums[0]){
            return getPivot(nums, mid + 1, e);
        }
        else{
            return getPivot(nums, s, mid - 1);
        }
    }
    
    int getIdxTarget(vector<int> &nums, int target, int s, int e){
        if(s > e){
            return -1;
        }
        int mid = s + (e - s)/2;
        if(nums[mid] == target){
            return mid;
        }
        else if(nums[mid] < target){
            return getIdxTarget(nums, target, mid + 1, e);
        }
        else{
            return getIdxTarget(nums, target, s, mid - 1);
        }
    }
    
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0){
            return -1;
        }
        if(nums.size() == 1){
            if(nums[0] == target)
                return 0;
            else
                return -1;
        }
        int n = nums.size();
        int pivot = 0;
        if(nums[0] > nums[n - 1]){
            pivot = getPivot(nums, 0, n - 1);
        }
        int idx = -1;
        cout<<pivot<<endl;
        if(target >= nums[pivot] && target <= nums[n - 1]){
            idx =  getIdxTarget(nums, target, pivot, n - 1);
        }
        else{
            idx = getIdxTarget(nums, target, 0, pivot - 1); 
        }
        return idx;
    }
};
