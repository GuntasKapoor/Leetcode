class Solution {
public:
    
    void DFS(vector<vector<char>>& grid,  vector<vector<int> > &visited, int i, int j, int N, int M){
        if(i > N - 1 || j > M - 1 || j < 0 || i < 0){
            return;
        }
        if(grid[i][j] == '0'){
            return;
        }
        if(visited[i][j]){
            return;
        }
        visited[i][j] = 1;
        DFS(grid, visited, i + 1, j, N, M);
        DFS(grid, visited, i - 1, j, N, M);
        DFS(grid, visited, i, j + 1, N, M);
        DFS(grid, visited, i, j - 1, N, M);
        return;
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int N = grid.size();
        if(N == 0){
            return 0;
        }
        int M = grid[0].size();
        if(M == 0){
            return 0;
        }
        vector<vector<int> > visited(N, vector<int>(M, 0));
        int islands = 0;
        for(int i = 0; i < N; i++){
            for(int j = 0; j < M; j++){
                if(grid[i][j] != '0' && !visited[i][j]){
                    DFS(grid, visited, i, j, N, M);
                    islands++;
                }
            }
        }
        return islands;
    }
};
