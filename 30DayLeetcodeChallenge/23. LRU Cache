class LRUCache {
public:
    list<pair<int,int> > l; 
    unordered_map<int, list<pair<int,int> > ::iterator> mp; 
    int capacity;
    LRUCache(int capacity) {
        this->capacity = capacity;
    }
    
    int get(int key) {
        if(mp.count(key) == 0){
            return -1;
        }
        auto it = mp[key];
        int value = it->second;
        l.erase(it);
        l.push_front(make_pair(key, value));
        mp[key] = l.begin();
        return value;
    }
    
    void put(int key, int value) {
        if(mp.count(key) == 0){
            if(l.size() == capacity){
                int k = l.back().first;
                mp.erase(k);
                l.pop_back();
            }
        } 
        else{
            auto it = mp[key];
            l.erase(it);
        }
        l.push_front(make_pair(key, value));
        mp[key] = l.begin();
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
