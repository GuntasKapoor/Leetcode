//Using 2 pointers ( O(n^2) )

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        if(nums.size() <= 2){
            return ans;
        }
        
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size() - 2; i++){
                if(i > 0 && nums[i] == nums[i - 1]){
                    continue;
                }
                int j = i + 1;
                int k = nums.size() - 1;
            
                while(j < k){
                if(j > i + 1 && nums[j] == nums[j - 1]){
                    j++;
                    continue;
                }
                if( nums[i] == -(nums[j] + nums[k]) ) {
                    vector<int> v{nums[i], nums[j], nums[k]};
                    ans.push_back(v);
                    j++;
                    k--;
                }
                else if(nums[i] > -(nums[j] + nums[k]) ){
                    k--;
                }
                else{
                    j++;
                }
            }
            }
           return ans;
}
};


